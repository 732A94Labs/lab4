usethis::use github action("check-standard")
usethis::use_github_action("check-standard")
usethis::use_testthat()
usethis::use_test()
iris
ggplot(iris, aes(x, y, color = group)) +
geom_point() +
theme_my()
ggplot2(iris, aes(x, y, color = group)) +
geom_point() +
theme_my()
ggplot2(iris)
library(ggplot2)
ggplot2(iris)
ggplot(iris)
ggplot(iris) +
geom_point()
ggplot(iris, (iris$Sepal.Length, iris$Sepal.Width)) +
ggplot(iris, (iris$Sepal.Length, iris$Sepal.Width)) +
ggplot(iris, aes(iris$Sepal.Length, iris$Sepal.Width)) +
geom_point()
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
#' Linköping University ggplot2 theme
#' @return A ggplot2 theme object
#' @export
liu_theme <- function() {
ggplot2::theme_minimal(base_size = 11) +
ggplot2::theme(
plot.background = ggplot2::element_rect(fill = "#d1f4f6"),
plot.title = ggplot2::element_text(face = "bold"),
panel.grid.minor = ggplot2::element_blank()
)
}
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
usethis::use_package()
usethis::use_package("lab4")
devtools::load_all()
devtools::document()
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
themed <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled + themed
themed <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled + themed
library(patchwork)
install.packages("patchwork")
library(patchwork)
unstyled <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
themed <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled + themed
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(ggplot2)
library(patchwork)
unstyled <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
themed <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled + themed
unstyled + themed
devtools::load_all
devtools::load_all()
library(ggplot2)
library(patchwork)
unstyled <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point()
themed <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) +
geom_point() +
liu_theme()
unstyled + themed
install.packages('lab4')
devtools::document()
usethis::use_mit_license()
browseVignettes("lab4")
usethis::use_vignette("linreg-vignette")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
# Overview
`linreg` is a lightweight reference class for fitting and analyzing **ordinary least squares (OLS)** linear regression models using basic linear algebra. It exposes a minimal API to:
- fit a model from a `formula` and `data.frame`,
It is intentionally small and dependency-free, which makes it ideal for teaching, inspection, and experimentation.
# Quick start
```{r}
# Fit a model on iris
linreg_model <- linreg$new(Petal.Length ~ Sepal.Width + Sepal.Length, data = iris)
# Print the call and coefficients
linreg_model
# Print the call and coefficients
linreg_model
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
linreg_model$summary()
par(mfrow = c(1, 2))
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, lty = 2)
abline(h = 0, lty = 2)
qqnorm(linreg_model$resid(), main = "Normal Q-Q of residuals")
qqnorm(linreg_model$resid(), main = "Normal Q-Q of residuals")
qqline(linreg_model$resid())
par(mfrow = c(1, 1))
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x1 <- rnorm(n)
x2 <- rnorm(n)
y  <- 1 + 2*x1 - 0.5*x2 + rnorm(n, sd = 0.75)
simdat <- data.frame(y, x1, x2)
m3 <- linreg$new(y ~ x1 + x2, data = simdat)
m3$summary()
# Compare estimates to truth (1, 2, -0.5)
m3$coef()
sessionInfo()
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
abline(h = 0, lty = 2)
qqnorm(linreg_model$resid(), main = "Normal Q-Q of residuals")
qqline(linreg_model$resid())
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
qqnorm(linreg_model$resid(), main = "Normal Q-Q of residuals")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
par(mfrow = c(1, 2))
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
qqnorm(linreg_model$resid(), main = "Normal Q-Q of residuals")
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
# Factor handling: Species is a factor; default treatment contrasts apply
m2 <- linreg$new(Petal.Length ~ Sepal.Length * Species, data = iris)
m2$summary()
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x2 <- rnorm(n)
y  <- 1 + 2*x1 - 0.5*x2 + rnorm(n, sd = 0.75)
simdat <- data.frame(y, x1, x2)
m3 <- linreg$new(y ~ x1 + x2, data = simdat)
m3$summary()
# Compare estimates to truth (1, 2, -0.5)
m3$coef()
sessionInfo()
usethis::use_vignette("liu_theme")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
# Overview
This vignette introduces `liu_theme()`, a minimalistic **ggplot2** theme inspired by Linköping University's visual style. It builds on `theme_minimal()` and adjusts background, grid, and titles for clean, legible charts out of the box.
```r
liu_theme <- function() {
ggplot2::theme_minimal(base_size = 11) +
ggplot2::theme(
plot.background = ggplot2::element_rect(fill = "#d1f4f6"),
plot.title = ggplot2::element_text(face = "bold"),
panel.grid.minor = ggplot2::element_blank(),
panel.grid.major = ggplot2::element_line(colour = "#54d8e0")
)
}
library(ggplot2)
p <- ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point() +
labs(
title = "Fuel economy by engine size",
subtitle = "EPA data (ggplot2::mpg)",
x = "Engine displacement (litres)",
y = "Highway MPG",
colour = "Class"
)
# Default ggplot2 look
p
p + liu_theme()
op_theme <- theme_set(liu_theme())
# Your plots now use liu_theme() by default
ggplot(mtcars, aes(wt, mpg)) + geom_point() + labs(title = "Default now: liu_theme()")
# Restore previous theme at the end if desired
theme_set(op_theme)
p + liu_theme() +
theme(
plot.title.position = "plot",
plot.title = element_text(size = 14),
panel.grid.major = element_line(linetype = 3)
)
p + liu_theme() +
scale_colour_brewer(palette = "Dark2")
sessionInfo()
devtools::document()
devtools::load_all()
devtools::document()
library(lab4)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
library(lab4)
P
# Fit a model on iris
linreg_model <- linreg$new(Petal.Length ~ Sepal.Width + Sepal.Length, data = iris)
# Print the call and coefficients
linreg_model
linreg
devtools::load_all()
exists("linreg", where = asNamespace("lab4"), inherits = FALSE)
devtools::document()
usethis::use_roxygen_md()
roxygen2::roxygenise()
devtools::document()
devtools::load_all()
ls("package:lab4")
lab4::linreg
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
browseVignettes("lab4")
devtools::load_all()
browseVignettes("lab4")
devtools::build_vignettes()
browseVignettes("lab4")
devtools::document()
devtools::load_all()
tools::buildVignettes(package = "lab4")
buildVignettes()
devtools::build_vignettes()
devtools::load_all()
testthat::test_check("lab4")
testthat::test_check()
usethis::use_testthat()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
# Force base primitives so the reverse-lookup in initialize() can't be masked
get    <- base::get
ls     <- base::ls
exists <- base::exists
library(lab4)
library(lab4)
# Overview
`linreg` is a lightweight reference class for fitting and analyzing **ordinary least squares (OLS)** linear regression models using basic linear algebra. It exposes a minimal API to:
- fit a model from a `formula` and `data.frame`,
It is intentionally small and dependency-free, which makes it ideal for teaching, inspection, and experimentation.
# Quick start
```{r}
# Fit a model on iris
linreg_model <- linreg$new(Petal.Length ~ Sepal.Width + Sepal.Length, data = iris)
# Print the call and coefficients
linreg_model
# Print the call and coefficients
linreg_model
Extract common components:
```{r}
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
linreg_model$summary()
plot(linreg_model$pred(), linreg_model$resid(),
xlab = "Fitted values", ylab = "Residuals",
main = "Residuals vs Fitted")
library(lab4)
library(lab4)
library(lab4)
assign("exists", base::exists, envir = init_env)
assign("get", base::get, envir = init_env)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_env <- environment(lab4::linreg$methods$initialize)
assign("get", base::get, envir = init_env)
assign("ls", base::ls, envir = init_env)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_env <- environment(lab4::linreg$methods$initialize)
assign("get", base::get, envir = init_env)
assign("ls", base::ls, envir = init_env)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_env <- environment(lab4::linreg$methods$initialize)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_env <- environment(lab4::linreg$methods$initialize)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_env <- environment(lab4::linreg$methods$initialize)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_fun <- get("initialize", envir = linreg$def@refMethods)
init_env <- environment(init_fun)
assign("get",    base::get,    envir = init_env)
assign("ls",     base::ls,     envir = init_env)
assign("exists", base::exists, envir = init_env)
library(lab4)
# Force base primitives so the reverse-lookup in initialize() can't be masked
init_def <- linreg$def@refMethods$initialize  # S4 method def
init_fun <- init_def@.Data                    # the actual function
init_env <- environment(init_fun)
assign("get",    base::get,    envir = init_env)
library(lab4)
devtools::document()
devtools::build_vignettes()
Last.error
.Last.error
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::build_vignettes()
devtools::build_vignettes()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 6, fig.height = 4,
out.width = "70%"
)
library(lab4)
library(lab4)
# Overview
# Overview
`linreg` is a lightweight reference class for fitting and analyzing **ordinary least squares (OLS)** linear regression models using basic linear algebra. It exposes a minimal API to:
- fit a model from a `formula` and `data.frame`,
It is intentionally small and dependency-free, which makes it ideal for teaching, inspection, and experimentation.
# Quick start
```{r}
# Fit a model on iris
linreg_model <- linreg$new(Petal.Length ~ Sepal.Width + Sepal.Length, data = iris)
# Print the call and coefficients
linreg_model
# Print the call and coefficients
linreg_model
Extract common components:
```{r}
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
linreg_model$pred()[1:5]
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
linreg_model$coef()
linreg_model$pred()[1:5]
linreg_model$resid()[1:5]
A more detailed summary:
```{r}
linreg_model$summary()
devtools::test()
?lab4:linreg_ref
?lab4::linreg_ref
?lab4::linreg
devtools::test()
